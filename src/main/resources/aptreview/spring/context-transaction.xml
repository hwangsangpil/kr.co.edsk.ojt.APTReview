<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd" >

	<!-- 트랜잭션 설정파일 -->
	
<!-- 
name : 트랜잭션이 적용될 메서드 이름을 명시하며 필수 속성이다. get*,delete*,* 설정이 가능하다.
propagation : 트랜잭션 동작 설정하며 기본값 REQUIRED 이다.
isolation : 트랜잭션의 격리 수준을 설정하며 기본값은 DEFAULT 이다.
timeout : 트랜잭션 시간 초과 값을 설정하며 기본값은 -1 이다. 초단위로 입력한다.
read-only : 읽기 전용 여부를 설정한다. 기본값은 false 이다.
rollback-for : 롤백을 할 예외를 설정한다. 여러개를 입력할 경우 , 로 구분한다. 기본값은 RuntimeException 이다. Exception, com.syaku.MyException 설정이 가능하다.
no-rollback-for : 롤백하지 않을 예외를 설정한다. 여러개를 입력할 경우 , 로 구분한다. Exception, com.syaku.MyException 설정이 가능하다.


propagation - 전파옵션 (기본값 : REQUIRED)

REQUIRED : 부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 새로운 트랜잭션을 생성한다.
REQUIRES_NEW : 부모 트랜잭션을 무시하고 무조건 새로운 트랜잭션이 생성한다.
SUPPORT : 부모 트랜잭션 내에서 실행하며 부모 트랜잭션이 없을 경우 nontransactionally로 실행된다.
MANDATORY : 부모 트랜잭션 내에서 실행되며 부모 트랜잭션이 없을 경우 예외가 발생된다.
NOT_SUPPORT : nontransactionally로 실행하며 부모 트랜잭션 내에서 실행될 경우 일시 정지된다.
NEVER : nontransactionally로 실행되며 부모 트랜잭션이 존재한다면 예외가 발생한다.
NESTED : 해당 메서드가 부모 트랜잭션에서 진행될 경우 별개로 커밋되거나 롤백될 수 있다. 둘러싼 트랜잭션이 없을 경우 REQUIRED와 동일하게 작동한다.


isolation - 격리수준 (기본값 : DEFAULT)

DEFAULT : DB에서 설정된 기본 격리 수준을 따른다.
SERIALIZABLE : 가장 높은 격리수준을 가지며 사용시 성능 저하가 있을 수 있다.
READ_UNCOMMITTED : 커밋되지 않은 데이터에 대한 읽기를 허용한다.
READ_COMMITTED : 커밋된 트랜잭션에 대해 읽기를 허용한다.
REPEATABLE_READ : 동일한 필드에 대한 다중 접근 시 동일한 결과를 얻을 수 잇는 것을 보장한다.

-->
    
    <!-- 트랜잭션 관리자 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 트랜잭션 Advice(충고)를 설정 -->
	<!-- txAdvice는 메소드에서 예외 발생시 트랜잭션 롤백을 수행 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 
	<bean class="kr.co.edsk.vm.pinesuite.util.db.MyBatisTransactionManager" scope="prototype" />
	 -->
	 
	<!-- 트랜잭션 Pointcut를 설정 -->
	<!-- requiredTx는 kr.co.edsk.ojt.APTReview 패키지 하위 impl 패키지에서 
		Impl로 끝나는 모든 클래스의 메소드를 포인트컷으로 지정 -->
	<!-- proxy-target-class="true" -->
	
	<aop:config>
		<aop:pointcut id="requiredTx" expression="execution(public * kr.co.edsk.ojt.APTReview.service.impl.*Impl.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx" />
	</aop:config>

</beans>
